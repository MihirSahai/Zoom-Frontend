{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","username","setUsername","stime","setStartTime","className","style","justifyContent","class","type","name","placeholder","width","borderRadius","padding","fontSize","value","onChange","e","target","height","fontFamily","alignItems","onClick","console","log","axios","post","email","then","response","URL","data","join_url","replaceAll","window","location","replace","catch","err","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPA2FeA,MArFf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA6BF,mBAAS,IAAtC,mBAAOG,EAAP,KAAaC,EAAb,KAmBA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEE,mEAEA,sBAAKA,UAAU,OAAOC,MAAO,CAACC,eAAgB,gBAA9C,UACE,qBAAKC,MAAM,OAAX,4SAGA,8CAEE,uBACEC,KAAK,OACLC,KAAK,OACLC,YAAY,aACZL,MAAO,CACLM,MAAO,QACPC,aAAc,MACdC,QAAS,WACTC,SAAU,QAEZC,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAAYgB,EAAEC,OAAOH,aAG1C,oDAEE,uBACEP,KAAK,OACLC,KAAK,OACLC,YAAY,iBACZL,MAAO,CACLM,MAAO,QACPC,aAAc,MACdC,QAAS,WACTC,SAAU,QAEZC,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAac,EAAEC,OAAOH,aAI3C,qBAAKX,UAAU,MAAf,SACM,wBACEA,UAAU,eACVC,MAAO,CACLM,MAAO,QACPQ,OAAQ,OACRL,SAAU,OACVM,WAAY,UACZC,WAAY,UAEdC,QAvEI,WAIlBC,QAAQC,IAAIxB,GACZyB,IACGC,KADH,gCAJa,CACXC,MAAO,2BAKNC,MAAK,SAACC,GACL,IAAIC,EACFD,EAASE,KAAKC,SAASC,WACrB,6BACA,2BAFF,uBAGoBjC,GACtBuB,QAAQC,IAAIM,GACZI,OAAOC,SAASC,QAAhB,UAA2BN,OAE5BO,OAAM,SAACC,GAAD,OAASf,QAAQgB,MAAMD,OA8CpB,uCC3DDE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9e018900.chunk.js","sourcesContent":["// import meeting from \"./meeting.png\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [stime,setStartTime] = useState(\"\"); \n  const zoomMeeting = () => {\n    const data = {\n      email: \"mihirsahai01@gmail.com\",\n    };\n    console.log(username);\n    axios\n      .post(`http://localhost:3444/meeting`, data)\n      .then((response) => {\n        let URL =\n          response.data.join_url.replaceAll(\n            \"https://us04web.zoom.us/j/\",\n            \"http://localhost:9999/?\"\n          ) + `?role=1?name=${username}`;\n        console.log(URL);\n        window.location.replace(`${URL}`);\n      })\n      .catch((err) => console.error(err));\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <Student /> */}\n        <h1>Zoom meeting link generation form</h1>\n        \n        <div className=\"card\" style={{justifyContent: \"space-around\"}}>\n          <div class=\"para\">\n            Dear User, You can fill your name and time for online zoom meeting in the form below and generate a meeting link. This generated meeting link uses this netlify/vercel url and NOT a zoom URL. Also the meeting link opens meeting inside this netlify/vercel website and not on zoom website.\n          </div>\n          <h5>\n            Name&nbsp;&nbsp;\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter Name\"\n              style={{\n                width: \"300px\",\n                borderRadius: \"5px\",\n                padding: \"8px 12px\",\n                fontSize: \"18px\",\n              }}\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </h5>\n          <h5>\n            Start Time&nbsp;&nbsp;\n            <input\n              type=\"text\"\n              name=\"time\"\n              placeholder=\"In 24hr format\"\n              style={{\n                width: \"260px\",\n                borderRadius: \"5px\",\n                padding: \"8px 12px\",\n                fontSize: \"18px\",\n              }}\n              value={stime}\n              onChange={(e) => setStartTime(e.target.value)}\n            />\n          </h5>\n\n          <div className=\"row\" >\n                <button\n                  className=\"btn btn-info\"\n                  style={{\n                    width: \"290px\",\n                    height: \"80px\",\n                    fontSize: \"20px\",\n                    fontFamily: \"cursive\",\n                    alignItems: \"center\"\n                  }}\n                  onClick={zoomMeeting}\n                >\n                Create Meeting\n                </button>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}